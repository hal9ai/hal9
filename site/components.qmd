---
title: "Components of an App"
eval: false
---

Previously, we discuss how to launch a starter app and make changes to it. Here, we talk about the
structure of a Hal9 app a bit more formally, for when you wanna do fancier stuff.

Basically, an app consists of:

- A configuration file: `hal9.toml`
- A frontend design file: `app.json`
- Runtime scripts: `R/backend.R` or `python/backend.py`

# Config file

_A configuration file is provided automatically in each new Hal9 application and does not need to be edited by the
user unless more control over the behavior of the app is desired._

Each Hal9 application contains a configuration file `hal9.toml` at the root of the app directory that contains
information necessary to deploy it. In addition to paths to the frontend design HTML file and the compute runtime
scripts, it will also include optional information about package dependencies, such as `renv.lock` for R runtimes
and `requirements.txt` for Python runtimes.

## Specification

A config file begins with a section `[application]` that contains the name and version of the app:

```toml
[application]
name = "my_app"
version = "0.0.1"
```

The next section, `[client]`, contains information on the frontend of the app. (While we currently serialize the
design to a JSON file, in the near future this will change to HTML in order to make further customization by web
designers easier.)

```toml
[client]
design = "app.json"
```

Finally, the `[[runtimes]]` sections include details on the compute runtimes:

```toml
[[runtimes]]
name = "r"
platform = "R"
script_dir = "R/backend.R"
```

Currently supported platforms are `"R"` and `"Python"`.

# Design file

This is the JSON file that encapsulates the frontend properties and dependency graph of components. Any changes made
to the layout and component properties in the designer are automatically saved here. You probably would never need to
look at it.

The design file is being ported to an HTML format in order to be more easily worked on by (real) web designers.

# Runtime scripts

These are the "brains" of your app, where you control the content and behavior of the components.