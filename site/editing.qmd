---
title: "Editing an app"
eval: false
---

We now give a brief overview of the Designer and the workflow to adding and controlling components in your app.

## The Designer

![The Hal9 Designer](hal9_screenshot_annotated.png)

The Designer consists of four panes, from left to right in the screenshot:

- **Components**: containing control and output components you can drag to the Canvas
- **Canvas**: WYSIWYG layout of your application
- **Code**: pane for you to edit the source code defining the behavior of the components; *you can optionally 
hide this and use your favorite IDE instead*
- **Properties**: specify the names, dependents, and runtimes of components

One approach to building apps with Hal9 is to first drag the components (sliders, HTML output, etc.) onto the canvas 
to match the layout of the
end product in your head, then modify the code associated with each component, while toggling between the Design/View
views using the dropdown in the upper right corner. Or, you could write the code for each component as you drag it
onto the canvas. It's up to you.

## Runtimes and the execution model

We're now ready to talk about code and how they are run! Let's start with these points

- Each component has a unique name (that you can specify)
- You control the dependencies/order of execution of the components by specifying dependencies in the properties pane
- For each component, you need to define its content (e.g., selectable values in a dropdown) and behavior (e.g., what
code should be run when a dropdown value is selected by the end user) using code

Let's take a look at an example from the starter app:

::: {.panel-tabset group="language"}

## R

```{r}
h9_dropdown(
    "species_dropdown",
    values = unique(levels(iris$Species)),
    on_update = function(value) {
        h9_set(value, "selected_species")
    }
)
```

## Python 

```{bash}
## TODO
```

:::

This snippet defines what goes into the values of the `"species_dropdown"` component via the `values` argument, and 
defines a function that's called when a user clicks one of the values of the dropdown, via the `on_update` argument.
While here we provide the dropdown values "programmatically", you could also as easily just provide a hardcoded vector,
such as `c("setosa", "virginica", "versicolor")`!

Now, since in the Designer, we have the component `"species_dropdown"` listed as a dependency of the component
`"iris_table"`, an HTML output block, the execution engine will ask the latter component to update. Let's take a look at
the abridged code for it:

::: {.panel-tabset group="language"}

## R

```{r}
h9_html(
    "iris_table",
    rawhtml = function() {
        sp <- h9_get("selected_species")

        out <- iris[iris$Species == sp, ]

        out |>
            knitr::kable(format = "html") |>
            as.character()
    }
```

## Python 

```{bash}
## TODO
```

:::

Hopefully, it is clear that what we're doing is grabbing the selected value of the dropdown, filtering the data frame
using the value, and generating an HTML representation of the resulting data frame.

### Data sharing across components and runtimes

The recommended way to manage global variables and data that need to be shared among components is using the 
`h9`-`get()`/`set()` functions. By explicitly writing and retrieving data, we reduce the chance of running into
not so obvious scoping related bugs. Also, soon we'll have support for passing data across runtime boundaries, and
these functions will be the interface to do so.