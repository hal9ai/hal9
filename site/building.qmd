---
title: "Building"
---

This document provides instructions on buliding the client libraries for different languages.

### Batteries included

To ease local development, the R and Python packages each include a full featured Hal9 server, which is why they
contain the server's Rust source code which need to be compiled. We recommend [rustup](https://rustup.rs/) if you don't
already have a Rust toolchain installed.

In both cases, building the packages do not generate a CLI executable; rather, the equivalent functionality is available
via exported functions. For example, `hal9 start` is exposed as `h9_start()` and `hal9.start()`, in R and Python
respectively.

## Rust/CLI

`cargo build` or `cargo install` from the `server/` directory.

## R

The R package, which lives in the `r/` directory,
utilizes the [extendr](https://github.com/extendr/extendr) framework to integrate the Rust source (which in the
repo is symlinked from `r/src/rust` to the `server/` directory).

The `extendr` module contains the code for exposing Rust functions in the R package, and if the file is modified, one
needs to run `rextendr::document()` in order to update the R package documentation.

Other than that, the compilation instructions for the various OSes are encoded in the `Makevars*` files under `r/src`,
and the package should build/install properly via `R CMD INSTALL`.

### Building on Windows

Note that, on Windows, compiling the package requires [Rtools](https://cran.r-project.org/bin/windows/Rtools/) to be
installed.

## Python

The Python package (under `python/`) utilizes [PyO3/Maturin](https://github.com/PyO3/maturin) to bind and bundle the 
Rust functions. The correct incantation to compile the package is `maturin build -F pyo3 -b pyo3`; the `-F pyo3` flag
enables the pyo3 feature in the hal9 server crate, and the `-b pyo3` instructs maturin to build for PyO3 bindings.

### Building on Windows 

Compiling the Python package on Windows is slightly complicated by the fact that Python could be compiled by GCC
(e.g. MingGW) or MSVC (e.g. Anaconda), which require different compilation targets. In the former case, it's typically
sufficient to make sure the `LIBRARY_PATH` environment variable is set appropriately, e.g., to the `lib/` directory of
your MinGW installation. It may also help to specify the target platform explicitly in the build command, e.g.
`maturin build -F pyo3 -b pyo3 --target x86_64-pc-windows-gnu`.

In the case of building for MSC Python, there is an additional step of installing the necessary Python debug symbols
and binaries. See [this Microsoft article](https://learn.microsoft.com/en-us/visualstudio/python/debugging-symbols-for-mixed-mode-c-cpp-python?view=vs-2022#download-symbols) for details. Once that is done, you also need to make the linker aware of the relevant
binaries, via the `-L` flag which is passed to rustc. For example, the build command may look like
`maturin build -F pyo3 -b pyo3 --target x86_64-pc-windows-msvc -- -L native="path/to/python/lib/dir"`.

Once `maturin build` produces a `.whl` file, you should be able to install it with `pip install`.