---
title: "Getting Started"
format: html
editor: visual
---

Creating an app in Hal9 is as easy as describing what you want in a prompt. In this tutorial, you will learn how to open Hal9, create [this app](https://hal9.com/apps/my-first-app) that plots and filters data from the Iris dataset (you will find the specific prompts we used) and how to save and share your app with the world. Let's check it out!

### My first App

The first step is go to <https://hal9.com/build> and there we will see the prompts bar where we can describe the app we need.

![](images/intro.png)

For our first app, we will work with the well-known `iris` dataset. We want, with this app, to be able to filter our data and make a graph with the resulting dataset. So let's go and type our first prompt.

#### Typing a prompt

Our first prompt will be `Load the iris dataset from sklearn.datasets` and as we can see we get the complete `iris` dataset.

![](images/1.gif)

Although in this case we have specifically requested our data from a python package, Hal9 offers several ways that we can use to get the data, including:

-   Providing a link where the data is publicly located.
-   Describing the data we need and it will take care of searching the data on the web.
-   Uploading the data in a csv file from our computer.

#### Making changes with prompts

Once we have our data, we probably want to modify our app and its functionalities, let's see how to do it using only prompts.

##### Creating filters

Adding the prompt `add a dropdown to filter the dataset by species` we get exactly what we want, a dropdown with the *setosa, versicolor* and *virginica* valuesandwhose function will be to filter the database depending on the selected species

![](images/2.gif)

We can add other filters, for example we could write `add a slider to filter the dataset by the sepal length` , and then we could filter our dataset not only by species but also by the value of the sepal length variable, as we see below

![](images/3.gif)

~Note that the limits of the slider will change according to the range in which the values of this variable are for the selected species.~

##### Adding plots

Once we have the database filtered, another useful functionality would be to graph our results. For this, we can even specify the library that we want to be used. Adding the following prompt `Using plotly, add a scatter plot for the filtered data` we get, as expected, a scatter plot that represents the data previously filtered by species and by sepal length.

![](images/4.gif)

Using different prompts we can specify various types of graphics, as well as change some basic characteristics.

#### Saving my app

When we get the app we want, we can save it, otherwise the app will be public and will appear in the *Gallery*. To save our app, we must log in first, but, if you do not have an account you will need to create one (It is totally free and you only need an email).

Once we are logged in, we can go to the *save* button and then we'll need to write a title and description for our app. Finally, we can select if the app will be public, private or accessible only with a link depending on the level of privacy we need.

![](images/5.gif)

#### Final App

You can see the final app in <https://hal9.com/apps/my-first-app>

##### *Prompts used:*

-   `Load the iris dataset from sklearn.datasets`
-   `add a dropdown to filter the dataset by species`
-   `add a slider to filter the dataset by the sepal length`
-   `Using plotly, add a scatter plot for the filtered data`

### Using my own data

Often, we want to use the data we have on local storage in our applications, and the good news is that this is very easy to do in Hal9. For this, when we are on the build apps page, all we have to do is select the first option that is under the prompts bar that says "create an app from a csv file", and then select our csv.

![](images/65.png) Immediately after selecting our csv file, the data will be displayed in a table and then we can introduce prompts and describe the app we want to build as we did before.

![](images/6.gif)

It is important to note that if we are not logged in, the created app will be publicly accessible and therefore, the uploaded data as well.
